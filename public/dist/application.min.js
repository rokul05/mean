"use strict";function DesktopApplicationService($rootScope,$http,$state,desktopMode){this.enabled=desktopMode,this.enabled&&document.body.addClass("desktop"),this.closeApplication=function(){if(this.enabled){require("nw.gui").Window.get().close()}else console.error("closeApplication() function only available in desktop mode.")}.bind(this),this.openFileFromDisk=function(callback){console.debug("# Open from disk");var chooser="#_header_openfile_dialog";chooser.unbind("change"),chooser.val(""),chooser.change(function(evt){var filepath=this.val();$rootScope.$apply(function(){callback&&callback(filepath)})}),chooser.trigger("click")}.bind(this),this.saveFileToDisk=function(callback){var chooser="#_header_savefile_dialog";chooser.unbind("change"),chooser.val(""),chooser.change(function(evt){var filepath=this.val();$rootScope.$apply(function(){callback&&callback(filepath)})}),chooser.trigger("click")}.bind(this),this.commandLineParameters=function(){return this.enabled?require("nw.gui").App.argv:null}.bind(this),this.validate=function(){this.commandLineParameters;return $http.post("/api/auth/desktop")}}var ApplicationConfiguration=function(){var applicationModuleName="mean";return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:["ngResource","ngAnimate","ngMessages","ui.router","ui.bootstrap","ui.utils","smart-table","angularFileUpload","ui.toggle","react"],registerModule:function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName)}}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider","$httpProvider",function($locationProvider,$httpProvider){$locationProvider.html5Mode(!0).hashPrefix("!"),$httpProvider.interceptors.push("authInterceptor")}]),angular.module(ApplicationConfiguration.applicationModuleName).run(["$rootScope","$state","Authentication",function($rootScope,$state,Authentication){function storePreviousState(state,params){state.data&&state.data.ignoreState||($state.previous={state:state,params:params,href:$state.href(state,params)})}$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(toState.data&&toState.data.roles&&toState.data.roles.length>0){var allowed=!1;toState.data.roles.forEach(function(role){if(void 0!==Authentication.user.roles&&-1!==Authentication.user.roles.indexOf(role))return allowed=!0,!0}),allowed||(event.preventDefault(),void 0!==Authentication.user&&"object"==typeof Authentication.user?$state.go("forbidden"):$state.go("authentication.signin").then(function(){storePreviousState(toState,toParams)}))}}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){storePreviousState(fromState,fromParams)})}]),angular.element(document).ready(function(){if(window.location.hash&&"#_=_"===window.location.hash)if(window.history&&history.pushState)window.history.pushState("",document.title,window.location.pathname);else{var scroll={top:document.body.scrollTop,left:document.body.scrollLeft};window.location.hash="",document.body.scrollTop=scroll.top,document.body.scrollLeft=scroll.left}angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("core.admin",["core"]),ApplicationConfiguration.registerModule("core.admin.routes",["ui.router"]),function(app){app.registerModule("customers")}(ApplicationConfiguration),ApplicationConfiguration.registerModule("users",["core"]),ApplicationConfiguration.registerModule("users.admin",["core.admin"]),ApplicationConfiguration.registerModule("users.admin.routes",["core.admin.routes"]),angular.module("core.admin").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Admin",state:"admin",type:"dropdown",roles:["admin"]})}]),angular.module("core.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin",{abstract:!0,url:"/admin",template:"<ui-view/>",data:{roles:["admin"]}})}]),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise(function($injector,$location){$injector.get("$state").transitionTo("not-found",null,{location:!1})}),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/client/views/home.client.view.html"}).state("not-found",{url:"/not-found",templateUrl:"modules/core/client/views/404.client.view.html",data:{ignoreState:!0}}).state("bad-request",{url:"/bad-request",templateUrl:"modules/core/client/views/400.client.view.html",data:{ignoreState:!0}}).state("forbidden",{url:"/forbidden",templateUrl:"modules/core/client/views/403.client.view.html",data:{ignoreState:!0}})}]);var DialogsController=function($scope,$modalInstance,$timeout,data){this.modalInstance_=$modalInstance,this.scope_=$scope,this.$timeout=$timeout,$scope.header=angular.isDefined(data.header)?data.header:"",$scope.msg=angular.isDefined(data.msg)?data.msg:"",$scope.icon="",$scope.okVisible=!!angular.isDefined(data.okVisible)&&data.okVisible,$scope.cancelVisible=!!angular.isDefined(data.cancelVisible)&&data.cancelVisible,$scope.yesVisible=!angular.isDefined(data.yesVisible)||data.yesVisible,$scope.noVisible=!angular.isDefined(data.noVisible)||data.noVisible,$scope.yesLabel=angular.isDefined(data.yesLabel)?data.yesLabel:"Yes",$scope.noLabel=angular.isDefined(data.noLabel)?data.noLabel:"No",$scope.cancelLabel=angular.isDefined(data.cancelLabel)?data.cancelLabel:"Cancel",$scope.okLabel=angular.isDefined(data.cancelLabel)?data.cancelLabel:"Ok"};DialogsController.prototype.yes=function(){this.modalInstance_.close("yes")},DialogsController.prototype.no=function(){this.modalInstance_.dismiss("no")},DialogsController.prototype.cancel=function(){this.modalInstance_.dismiss("cancel")},angular.module("core").controller("DialogsController",["$scope","$uibModalInstance","$timeout","data",DialogsController]),angular.module("core").controller("FooterController",["$scope",function($scope){$scope.appVersion="1"}]),angular.module("core").controller("HeaderController",["$scope","$state","Authentication","Menus",function($scope,$state,Authentication,Menus){$scope.$state=$state,$scope.authentication=Authentication,$scope.menu=Menus.getMenu("topbar"),$scope.isCollapsed=!1,$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication","CustomersService",function($scope,Authentication,Customers){$scope.authentication=Authentication,$scope.customersCount=Customers.countCustomers(function(data){$scope.customersCount=data,$scope.alerts[0].total=$scope.customersCount.count,console.log("Virtual customers ",$scope.customersCount)}),$scope.alerts=[{icon:"glyphicon-user",colour:"btn-success",total:$scope.customersCount.count,description:"TOTAL CUSTOMERS"},{icon:"glyphicon-calendar",colour:"btn-primary",total:"8,382",description:"UPCOMING EVENTS"},{icon:"glyphicon-edit",colour:"btn-success",total:"527",description:"NEW CUSTOMERS IN 24H"},{icon:"glyphicon-record",colour:"btn-info",total:"85,000",description:"EMAILS SENT"},{icon:"glyphicon-eye-open",colour:"btn-warning",total:"268",description:"FOLLOW UP REQUIRED"},{icon:"glyphicon-flag",colour:"btn-danger",total:"348",description:"REFERRALS TO MODERATE"}]}]),function(){angular.module("core").directive("utDropdown",["$timeout","Presets",function($timeout,presets){return{restrict:"E",scope:{ngModel:"=",ngChange:"&",options:"=",ngDisabled:"="},link:function($scope,element,attrs){$scope.defaultLabel=attrs.defaultLabel,$scope.getDisplayedValue=function(){for(var i=0;i<$scope.options.length;i++)if($scope.options[i].value===$scope.ngModel)return $scope.options[i].label;return $scope.defaultLabel||$scope.ngModel},$scope.changeItem=function(value){value!==$scope.ngModel&&($scope.ngModel=value,$timeout(function(){$scope.ngChange()}))}},templateUrl:"modules/core/client/templates/dropdown.directive.template.html"}}])}(),angular.module("core").directive("utUpload",["$parse",function($parse){return{restrict:"A",link:function($scope,element,attrs){var parsedFile=$parse(attrs.utUpload),parsedFileSetter=parsedFile.assign,reader=new FileReader;reader.onload=function(e){$scope.image=e.target.result,$scope.$apply(),console.log("image src",$scope.image)},element.on("change",function(){reader.readAsDataURL(element[0].files[0]),$scope.$apply(function(){parsedFileSetter($scope,element[0].files[0])})})}}}]),angular.module("core").directive("showErrors",["$timeout","$interpolate",function($timeout,$interpolate){var linkFn=function(scope,el,attrs,formCtrl){var inputEl,inputName,inputNgEl,options,showSuccess,toggleClasses,initCheck=!1,showValidationMessages=!1;if(options=scope.$eval(attrs.showErrors)||{},showSuccess=options.showSuccess||!1,inputEl=el[0].querySelector(".form-control[name]")||el[0].querySelector("[name]"),inputNgEl=angular.element(inputEl),!(inputName=$interpolate(inputNgEl.attr("name")||"")(scope)))throw"show-errors element has no child input elements with a 'name' attribute class";var reset=function(){return $timeout(function(){el.removeClass("has-error"),el.removeClass("has-success"),showValidationMessages=!1},0,!1)};scope.$watch(function(){return formCtrl[inputName]&&formCtrl[inputName].$invalid},function(invalid){return toggleClasses(invalid)}),scope.$on("show-errors-check-validity",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return initCheck=!0,showValidationMessages=!0,toggleClasses(formCtrl[inputName].$invalid)}),scope.$on("show-errors-reset",function(event,name){if(angular.isUndefined(name)||formCtrl.$name===name)return reset()}),toggleClasses=function(invalid){if(el.toggleClass("has-error",showValidationMessages&&invalid),showSuccess)return el.toggleClass("has-success",showValidationMessages&&!invalid)}};return{restrict:"A",require:"^form",compile:function(elem,attrs){if(-1===attrs.showErrors.indexOf("skipFormGroupCheck")&&!elem.hasClass("form-group")&&!elem.hasClass("input-group"))throw"show-errors element does not have the 'form-group' or 'input-group' class";return linkFn}}}]),DesktopApplicationService.$inject=["$rootScope","$http","$state","desktopMode"],angular.module("core").service("DesktopApplication",DesktopApplicationService);var DialogsService=function($uibModal,$log,$q){this._uibModal=$uibModal,this._log=$log,this._q=$q,this._b=!0,this._k=!0,this._w="dialogs-default",this._bdc="dialogs-backdrop-default",this._copy=!0,this._wTmpl=null,this._wSize="",this._animation=!0,this._fa=!1,this._cancelVisible=!1};DialogsService.prototype._setOpts=function(opts){var _opts={};return opts=opts||{},_opts.kb=angular.isDefined(opts.keyboard)?!!opts.keyboard:this._k,_opts.bd=angular.isDefined(opts.backdrop)?opts.backdrop:this._b,_opts.bdc=angular.isDefined(opts.backdropClass)?opts.backdropClass:this._bdc,_opts.ws=!angular.isDefined(opts.size)||"sm"!==opts.size&&"lg"!==opts.size&&"md"!==opts.size?this._wSize:opts.size,_opts.wc=angular.isDefined(opts.windowClass)?opts.windowClass:this._w,_opts.anim=angular.isDefined(opts.animation)?!!opts.animation:this._animation,_opts.fa=this._fa,_opts.cancelVisible=angular.isDefined(opts.cancelVisible)?!!opts.cancelVisible:this._cancelVisible,_opts.yesLabel=angular.isDefined(opts.yesLabel)?opts.yesLabel:void 0,_opts.noLabel=angular.isDefined(opts.noLabel)?opts.noLabel:void 0,_opts.cancelLabel=angular.isDefined(opts.cancelLabel)?opts.cancelLabel:void 0,_opts},DialogsService.prototype.confirm=function(header,msg,opts){return opts=this._setOpts(opts),this._uibModal.open({templateUrl:"modules/core/client/views/dialog-confirm.html",controller:"DialogsController",controllerAs:"controller",backdrop:opts.bd,backdropClass:opts.bdc,keyboard:opts.kb,windowClass:opts.wc,size:opts.ws,animation:opts.anim,resolve:{data:function(){return{header:angular.copy(header),msg:angular.copy(msg),fa:opts.fa,cancelVisible:opts.cancelVisible,yesLabel:opts.yesLabel,noLabel:opts.noLabel,cancelLabel:opts.cancelLabel}}}})},DialogsService.prototype.alert=function(header,msg,opts){return opts=this._setOpts(opts),this._uibModal.open({templateUrl:"modules/core/client/views/dialog-confirm.html",controller:"DialogsController",controllerAs:"controller",backdrop:opts.bd,backdropClass:opts.bdc,keyboard:opts.kb,windowClass:opts.wc,size:opts.ws,animation:opts.anim,resolve:{data:function(){return{header:angular.copy(header),msg:angular.copy(msg),fa:opts.fa,yesVisible:!1,noVisible:!1,okVisible:!0,cancelVisible:opts.cancelVisible,okLabel:opts.okLabel,cancelLabel:opts.cancelLabel}}}})},angular.module("core").service("dialogs",["$uibModal","$log","$q",DialogsService]),angular.module("core").factory("authInterceptor",["$q","$injector",function($q,$injector){return{responseError:function(rejection){if(!rejection.config.ignoreAuthModule)switch(rejection.status){case 401:$injector.get("$state").transitionTo("authentication.signin");break;case 403:$injector.get("$state").transitionTo("forbidden")}return $q.reject(rejection)}}}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["user","admin"],this.menus={};var shouldRender=function(user){if(~this.roles.indexOf("*"))return!0;if(!user)return!1;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exist")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,options){return options=options||{},this.menus[menuId]={roles:options.roles||this.defaultRoles,items:options.items||[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,options){if(options=options||{},this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:options.title||"",state:options.state||"",type:options.type||"item",class:options.class,roles:null===options.roles||void 0===options.roles?this.defaultRoles:options.roles,position:options.position||0,items:[],shouldRender:shouldRender}),options.items)for(var i in options.items)this.addSubMenuItem(menuId,options.state,options.items[i]);return this.menus[menuId]},this.addSubMenuItem=function(menuId,parentItemState,options){options=options||{},this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===parentItemState&&this.menus[menuId].items[itemIndex].items.push({title:options.title||"",state:options.state||"",roles:null===options.roles||void 0===options.roles?this.menus[menuId].items[itemIndex].roles:options.roles,position:options.position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].state===menuItemState&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemState){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].state===submenuItemState&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar",{roles:["*"]})}]),function(){function PresetsService(){var vm={};return vm.channels=[{label:"Choose Channel",value:"no"},{value:!1},{label:"Facebook",value:"facebook"},{label:"Twitter",value:"twitter"},{label:"Email",value:"email"}],vm.filterList=[{label:"Facebook",value:"facebook"},{label:"Twitter",value:"twitter"},{label:"Email",value:"email"},{value:!1},{label:"Show all",value:"all"}],vm}angular.module("core").service("Presets",PresetsService),PresetsService.$inject=[]}(),angular.module("core").service("Socket",["Authentication","$state","$timeout",function(Authentication,$state,$timeout){this.connect=function(){Authentication.user&&(this.socket=io())},this.connect(),this.on=function(eventName,callback){this.socket&&this.socket.on(eventName,function(data){$timeout(function(){callback(data)})})},this.emit=function(eventName,data){this.socket&&this.socket.emit(eventName,data)},this.removeListener=function(eventName){this.socket&&this.socket.removeListener(eventName)}}]),angular.module("customers").run(["Menus",function(Menus){Menus.addMenuItem("topbar",{title:"Customers",state:"customers",type:"dropdown",roles:["*"]}),Menus.addSubMenuItem("topbar","customers",{title:"List Customers",state:"customers.list",roles:["*"]}),Menus.addSubMenuItem("topbar","customers",{title:"List Customers (Icons)",state:"customers.listicon",roles:["*"]}),Menus.addSubMenuItem("topbar","customers",{title:"Create Customer",state:"customers.create",roles:["user"]})}]),function(){function routeConfig($stateProvider){$stateProvider.state("customers",{abstract:!0,url:"/customers",template:"<ui-view/>"}).state("customers.list",{url:"",templateUrl:"modules/customers/client/views/list-customers.client.view.html",controller:"CustomersListController",controllerAs:"vm",data:{pageTitle:"Customers List"}}).state("customers.listicon",{url:"",templateUrl:"modules/customers/client/views/listicon-customers.client.view.html",controller:"CustomersListIconController",data:{pageTitle:"Customers List (Icons)"}}).state("customers.create",{url:"/create",templateUrl:"modules/customers/client/views/list-customers.client.view.html",controller:"CustomersListController",controllerAs:"vm",resolve:{customerResolve:newCustomer},data:{roles:["user","admin"],pageTitle:"Customer Create"}}).state("customers.edit",{url:"/:customerId/edit",templateUrl:"modules/customers/client/views/form-customer.client.view.html",controller:"CustomersController",controllerAs:"vm",resolve:{customerResolve:getCustomer},data:{roles:["user","admin"],pageTitle:"Edit Customer {{ customerResolve.name }}"}}).state("customers.view",{url:"/:customerId",templateUrl:"modules/customers/client/views/form-customer.client.view.html",controller:"CustomersController",controllerAs:"vm",resolve:{customerResolve:getCustomer},data:{pageTitle:"Customer {{ customerResolve.name }}"}})}function getCustomer($stateParams,CustomersService){return CustomersService.get({customerId:$stateParams.customerId}).$promise}function newCustomer(CustomersService){return new CustomersService}angular.module("customers").config(routeConfig),routeConfig.$inject=["$stateProvider"],getCustomer.$inject=["$stateParams","CustomersService"],newCustomer.$inject=["CustomersService"]}(),function(){function CustomersController($scope,$state,$stateParams,$location,Authentication,Customers,Notify,presets,upload){this.customer={},$scope.file={},$scope.authentication=Authentication,$scope.customers=Customers.query(),$scope.customer&&($scope.image=$scope.customer.image),$scope.presets=presets,$scope.changeChannel=function(){},$scope.create=function(isValid,listMode){return $scope.error=null,$scope.customer._id?$scope.update(isValid):isValid?void new Customers({firstName:this.customer.firstName,surname:this.customer.surname,suburb:this.customer.suburb,country:this.customer.country,industry:this.customer.industry,email:this.customer.email,phone:this.customer.phone,referred:this.customer.referred,channel:this.customer.channel}).$save(function(response){Notify.sendMsg("NewCustomer",{id:response._id}),"icon"===listMode?$state.go("customers.listicon"):$state.go("customers.list"),$scope.ok(),$scope.customer.firstName="",$scope.customer.surname="",$scope.customer.suburb="",$scope.customer.country="",$scope.customer.industry="",$scope.customer.email="",$scope.customer.phone="",$scope.customer.referred="",$scope.customer.channel=""},function(errorResponse){$scope.error=errorResponse.data.message}):($scope.$broadcast("show-errors-check-validity","customerForm"),!1)},$scope.remove=function(customer){if(customer){customer.$remove();for(var i in $scope.customers)$scope.customers[i]===customer&&$scope.customers.splice(i,1)}else $scope.customer.$remove(function(){$location.path("customers")})},$scope.update=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","customerForm"),!1;var customer=$scope.customer;$scope.saveFile=upload.saveImage($scope.file).then(function(data){console.log("DATA image",data),$scope.customer.image=data.data.file.destination+data.data.file.filename,$scope.customerSave(customer)})},$scope.customerSave=function(customer){customer.$update(function(){$scope.ok()},function(errorResponse){console.log("Error to update customer",customer)})},$scope.close=function(){$scope.update("true")},$scope.findOne=function(){$scope.customer=Customers.get({customerId:$stateParams.customerId})}}angular.module("customers").controller("CustomersController",CustomersController),CustomersController.$inject=["$scope","$state","$stateParams","$location","Authentication","CustomersService","Notify","Presets","UploadFileService"]}(),function(){function CustomersListController($rootScope,$scope,customers,$state,presets,customerModal,dialogs,menus){var vm=this;vm.filterList=presets.filterList,vm.filter="all",$scope.listMode="list",vm.modalUpdate=function(selectedCustomer){var scope=$scope;customerModal.editCustomer(scope,selectedCustomer).result.then(function(){console.log("customer"),vm.getPageCustomers()})},"customers.create"===$state.current.name&&(vm.modalUpdate(),$state.go("customers.list"),menus.removeSubMenuItem("topbar","customers.create")),vm.setFilter=function(index){vm.filter=vm.filterList[index].value,vm.searchValue=null,"all"!==vm.filter?$scope.tableState.search.predicateObject={channel:vm.filterList[index].value}:$scope.tableState.search.predicateObject={$:""},vm.getPageCustomers()},console.log("state - ",$state.current.name),vm.searchValue=null,vm.search=function(){console.log("input - ",vm.searchValue),vm.filter="all",$scope.tableState.search.predicateObject={$:vm.searchValue},vm.getPageCustomers()},vm.currentItem=0,vm.pageSizes=[5,10,25,50],vm.setItemsPerPage=function(itemsPage){vm.itemsPerPage=itemsPage,console.debug("itemsPerPage - "+vm.itemsPerPage)},vm.setItemsPerPage(vm.pageSizes[0]),vm.isLoading=!1,vm.getPageCustomers=function(tableState){if(void 0===tableState?tableState=$scope.tableState:$scope.tableState=tableState,tableState.pagination.number!==vm.itemsPerPage&&(tableState.pagination.start=0),tableState.pagination.number=vm.itemsPerPage,vm.setItemsPerPage(vm.itemsPerPage),void 0===tableState)return void console.log("nothing to do");if(vm.isLoading)return void console.log("skipping");vm.isLoading=!0;var start=tableState.pagination.start||0,number=tableState.pagination.number||10,sort=JSON.stringify(tableState.sort),search=JSON.stringify(tableState.search.predicateObject);console.log("Search",JSON.stringify(tableState.search.predicateObject));var items=customers.query({start:start,number:number,search:search,sort:sort},function(data,responseHeaders){var total=parseInt(responseHeaders("total"));vm.totalCount=total,tableState.pagination={start:start,number:number,numberOfPages:Math.ceil(total/vm.itemsPerPage)},items&&(vm.customers=items,vm.currentItem>=items.length&&(vm.currentItem=0),items.length>0&&vm.select(vm.customers[vm.currentItem],vm.currentItem)),vm.isLoading=!1,console.log("tableState",$scope.tableState),console.log("done loading")})},vm.isSelected=function(customer){return customer._id===$state.params.customerId},vm.select=function(customer,index){customer&&(vm.currentItem=index,vm.customer=customer)},vm.edit=function(customer,index,$event){console.log("edit ",customer._id),vm.currentItem=index,$state.go("customers.edit",{customerId:customer._id}),$event.stopImmediatePropagation()},vm.delete=function(customer){dialogs.confirm("Delete Template","Do you wish to delete the customer?",{yesLabel:"Delete",noLabel:"Cancel"}).result.then(function(){if(customer){customer.$remove();for(var i in vm.customers)if(vm.customers[i]===customer){vm.customers.splice(i,1);break}}else vm.customer.$remove(function(){$state.go("customers.list")})})},$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){console.log("state change success",toState.name)}),$rootScope.$on("$stateChangeError",function(event,toState,toParams,fromState,fromParams,error){console.log("state change error",toState.name,error)}),$scope.$on("$stateNotFound",function(event,unfoundState,fromState,fromParams){console.log(unfoundState.to),console.log(unfoundState.toParams),console.log(unfoundState.options)})}angular.module("customers").controller("CustomersListController",CustomersListController),CustomersListController.$inject=["$rootScope","$scope","CustomersService","$state","Presets","CustomerModal","dialogs","Menus"],angular.module("customers").filter("statusFilter",["$filter",function($filter){return function(input,predicate){var strict=!0;return predicate&&(strict=!0),strict=!1,$filter("filter")(input,predicate,strict)}}])}(),function(){function CustomersListIconController($scope,$state,customers,$modal,$log,customerModal){$scope.customers=customers.query(),$scope.listMode="icon",$scope.modalUpdate=function(selectedCustomer){var scope=$scope;customerModal.editCustomer(scope,selectedCustomer)}}angular.module("customers").controller("CustomersListIconController",CustomersListIconController),CustomersListIconController.$inject=["$scope","$state","CustomersService","$uibModal","$log","CustomerModal"]}(),angular.module("customers").directive("customerList",["CustomersService","Notify",function(customers,notify){return{restrict:"E",transclude:!0,templateUrl:"modules/customers/client/views/list-customer.template.html",link:function(scope,element,attr){notify.getMsg("NewCustomer",function(event,data){scope.customers=customers.query()})}}}]),function(){function CustomerModalServise($modal,Customers){this.editCustomer=function($scope,selectedCustomer){return $modal.open({templateUrl:"modules/customers/client/views/form-customer.client.view.html",controller:["$scope","$modalInstance","customer",function($scope,$modalInstance,customer){$scope.customer=customer,$scope.ok=function(){$modalInstance.close($scope.customer)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:"lg",resolve:{customer:function(){return selectedCustomer}}})}}angular.module("customers").service("CustomerModal",CustomerModalServise),CustomerModalServise.$inject=["$uibModal","CustomersService"]}(),function(){function CustomersService($resource){return $resource("api/customers/:customerId",{customerId:"@_id"},{update:{method:"PUT"},countCustomers:{method:"GET",url:"/api/customers/custCount",isArray:!1},query:{method:"GET",url:"api/customers?start=:start&number=:number&search=:search&sort=:sort&group&show",params:{start:"@start",number:"@number",search:"@search",sort:"@sort"},isArray:!0}})}angular.module("customers").factory("CustomersService",CustomersService),CustomersService.$inject=["$resource"]}(),function(){function Notify($rootScope){var notify=[];return notify.sendMsg=function(msg,data){data=data||{},$rootScope.$emit(msg,data),console.log("message sent")},notify.getMsg=function(msg,func,scope){var unbind=$rootScope.$on(msg,func);scope&&scope.$on("destroy",unbind)},notify}angular.module("customers").factory("Notify",Notify),Notify.$inject=["$rootScope"]}(),function(){function UploadFileService($http){this.saveImage=function(file){var fd=new FormData;return fd.append("myImage",file.upload),$http.post("api/customers/saveFile",fd,{transformRequest:angular.identity,headers:{"Content-Type":void 0}})}}angular.module("customers").service("UploadFileService",UploadFileService),UploadFileService.$inject=["$http"]}(),angular.module("users.admin").run(["Menus",function(Menus){Menus.addSubMenuItem("topbar","admin",{title:"Manage Users",state:"admin.users"})}]),angular.module("users.admin.routes").config(["$stateProvider",function($stateProvider){$stateProvider.state("admin.users",{url:"/users",templateUrl:"modules/users/client/views/admin/list-users.client.view.html",controller:"UserListController"}).state("admin.user",{url:"/users/:userId",templateUrl:"modules/users/client/views/admin/view-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}}).state("admin.user-edit",{url:"/users/:userId/edit",templateUrl:"modules/users/client/views/admin/edit-user.client.view.html",controller:"UserController",resolve:{userResolve:["$stateParams","Admin",function($stateParams,Admin){return Admin.get({userId:$stateParams.userId})}]}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin")}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("settings",{abstract:!0,url:"/settings",templateUrl:"modules/users/client/views/settings/settings.client.view.html",data:{roles:["user","admin"]}}).state("settings.profile",{url:"/profile",templateUrl:"modules/users/client/views/settings/edit-profile.client.view.html"}).state("settings.password",{url:"/password",templateUrl:"modules/users/client/views/settings/change-password.client.view.html"}).state("settings.accounts",{url:"/accounts",templateUrl:"modules/users/client/views/settings/manage-social-accounts.client.view.html"}).state("settings.picture",{url:"/picture",templateUrl:"modules/users/client/views/settings/change-profile-picture.client.view.html"}).state("authentication",{abstract:!0,url:"/authentication",templateUrl:"modules/users/client/views/authentication/authentication.client.view.html"}).state("authentication.signup",{url:"/signup",templateUrl:"modules/users/client/views/authentication/signup.client.view.html"}).state("authentication.signin",{url:"/signin?err",templateUrl:"modules/users/client/views/authentication/signin.client.view.html"}).state("password",{abstract:!0,url:"/password",template:"<ui-view/>"}).state("password.forgot",{url:"/forgot",templateUrl:"modules/users/client/views/password/forgot-password.client.view.html"}).state("password.reset",{abstract:!0,url:"/reset",template:"<ui-view/>"}).state("password.reset.invalid",{url:"/invalid",templateUrl:"modules/users/client/views/password/reset-password-invalid.client.view.html"}).state("password.reset.success",{url:"/success",templateUrl:"modules/users/client/views/password/reset-password-success.client.view.html"}).state("password.reset.form",{url:"/:token",templateUrl:"modules/users/client/views/password/reset-password.client.view.html"})}]),angular.module("users.admin").controller("UserListController",["$scope","$filter","Admin",function($scope,$filter,Admin){Admin.query(function(data){$scope.users=data,$scope.buildPager()}),$scope.buildPager=function(){$scope.pagedItems=[],$scope.itemsPerPage=15,$scope.currentPage=1,$scope.figureOutItemsToDisplay()},$scope.figureOutItemsToDisplay=function(){$scope.filteredItems=$filter("filter")($scope.users,{$:$scope.search}),$scope.filterLength=$scope.filteredItems.length;var begin=($scope.currentPage-1)*$scope.itemsPerPage,end=begin+$scope.itemsPerPage;$scope.pagedItems=$scope.filteredItems.slice(begin,end)},$scope.pageChanged=function(){$scope.figureOutItemsToDisplay()}}]),
angular.module("users.admin").controller("UserController",["$scope","$state","Authentication","userResolve",function($scope,$state,Authentication,userResolve){$scope.authentication=Authentication,$scope.user=userResolve,$scope.remove=function(user){confirm("Are you sure you want to delete this user?")&&(user?(user.$remove(),$scope.users.splice($scope.users.indexOf(user),1)):$scope.user.$remove(function(){$state.go("admin.users")}))},$scope.update=function(isValid){if(!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;var user=$scope.user;user.$update(function(){$state.go("admin.user",{userId:user._id})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("users").controller("AuthenticationController",["$scope","$state","$http","$location","$window","Authentication","PasswordValidator",function($scope,$state,$http,$location,$window,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.error=$location.search().err,$scope.authentication.user&&$location.path("/"),$scope.signup=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;$http.post("/api/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message})},$scope.signin=function(isValid){if($scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;$http.post("/api/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$state.go($state.previous.state.name||"home",$state.previous.params)}).error(function(response){$scope.error=response.message})},$scope.callOauthProvider=function(url){$state.previous&&$state.previous.href&&(url+="?redirect_to="+encodeURIComponent($state.previous.href)),$window.location.href=url}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication","PasswordValidator",function($scope,$stateParams,$http,$location,Authentication,PasswordValidator){$scope.authentication=Authentication,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","forgotPasswordForm"),!1;$http.post("/api/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","resetPasswordForm"),!1;$http.post("/api/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangePasswordController",["$scope","$http","Authentication","PasswordValidator",function($scope,$http,Authentication,PasswordValidator){$scope.user=Authentication.user,$scope.popoverMsg=PasswordValidator.getPopoverMsg(),$scope.changeUserPassword=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","passwordForm"),!1;$http.post("/api/users/password",$scope.passwordDetails).success(function(response){$scope.$broadcast("show-errors-reset","passwordForm"),$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("ChangeProfilePictureController",["$scope","$timeout","$window","Authentication","FileUploader",function($scope,$timeout,$window,Authentication,FileUploader){$scope.user=Authentication.user,$scope.imageURL=$scope.user.profileImageURL,$scope.uploader=new FileUploader({url:"api/users/picture",alias:"newProfilePicture"}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item,options){return-1!=="|jpg|png|jpeg|bmp|gif|".indexOf("|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|")}}),$scope.uploader.onAfterAddingFile=function(fileItem){if($window.FileReader){var fileReader=new FileReader;fileReader.readAsDataURL(fileItem._file),fileReader.onload=function(fileReaderEvent){$timeout(function(){$scope.imageURL=fileReaderEvent.target.result},0)}}},$scope.uploader.onSuccessItem=function(fileItem,response,status,headers){$scope.success=!0,$scope.user=Authentication.user=response,$scope.cancelUpload()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$scope.cancelUpload(),$scope.error=response.message},$scope.uploadProfilePicture=function(){$scope.success=$scope.error=null,$scope.uploader.uploadAll()},$scope.cancelUpload=function(){$scope.uploader.clearQueue(),$scope.imageURL=$scope.user.profileImageURL}}]),angular.module("users").controller("EditProfileController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.updateUserProfile=function(isValid){if($scope.success=$scope.error=null,!isValid)return $scope.$broadcast("show-errors-check-validity","userForm"),!1;new Users($scope.user).$update(function(response){$scope.$broadcast("show-errors-reset","userForm"),$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}}]),angular.module("users").controller("SocialAccountsController",["$scope","$http","Authentication",function($scope,$http,Authentication){$scope.user=Authentication.user,$scope.hasConnectedAdditionalSocialAccounts=function(provider){for(var i in $scope.user.additionalProvidersData)return!0;return!1},$scope.isConnectedSocialAccount=function(provider){return $scope.user.provider===provider||$scope.user.additionalProvidersData&&$scope.user.additionalProvidersData[provider]},$scope.removeUserSocialAccount=function(provider){$scope.success=$scope.error=null,$http.delete("/api/users/accounts",{params:{provider:provider}}).success(function(response){$scope.success=!0,$scope.user=Authentication.user=response}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","Authentication",function($scope,Authentication){$scope.user=Authentication.user}]),angular.module("users").directive("passwordValidator",["PasswordValidator",function(PasswordValidator){return{require:"ngModel",link:function(scope,element,attrs,ngModel){ngModel.$validators.requirements=function(password){var status=!0;if(password){var result=PasswordValidator.getResult(password),requirementsIdx=0,requirementsMeter=[{color:"danger",progress:"20"},{color:"warning",progress:"40"},{color:"info",progress:"60"},{color:"primary",progress:"80"},{color:"success",progress:"100"}];result.errors.length<requirementsMeter.length&&(requirementsIdx=requirementsMeter.length-result.errors.length-1),scope.requirementsColor=requirementsMeter[requirementsIdx].color,scope.requirementsProgress=requirementsMeter[requirementsIdx].progress,result.errors.length?(scope.popoverMsg=PasswordValidator.getPopoverMsg(),scope.passwordErrors=result.errors,status=!1):(scope.popoverMsg="",scope.passwordErrors=[],status=!0)}return status}}}}]),angular.module("users").directive("passwordVerify",[function(){return{require:"ngModel",scope:{passwordVerify:"="},link:function(scope,element,attrs,ngModel){scope.$watch(function(){var combined;return(scope.passwordVerify||ngModel)&&(combined=scope.passwordVerify+"_"+ngModel),combined},function(value){value&&(ngModel.$validators.passwordVerify=function(password){return scope.passwordVerify===password})})}}}]),angular.module("users").directive("lowercase",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(input){return input?input.toLowerCase():""}),element.css("text-transform","lowercase")}}}),angular.module("users").factory("Authentication",["$window",function($window){return{user:$window.user}}]),angular.module("users").factory("PasswordValidator",["$window",function($window){var owaspPasswordStrengthTest=$window.owaspPasswordStrengthTest;return{getResult:function(password){return owaspPasswordStrengthTest.test(password)},getPopoverMsg:function(){return"Please enter a passphrase or password with greater than 10 characters, numbers, lowercase, upppercase, and special characters."}}}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("api/users",{},{update:{method:"PUT"}})}]),angular.module("users.admin").factory("Admin",["$resource",function($resource){return $resource("api/users/:userId",{userId:"@_id"},{update:{method:"PUT"}})}]);